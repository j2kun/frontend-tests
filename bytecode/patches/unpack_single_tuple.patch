diff --git a/bytecode/numba/core/interpreter.py b/bytecode/numba/core/interpreter.py
index 50fe70d..e08874e 100644
--- a/bytecode/numba/core/interpreter.py
+++ b/bytecode/numba/core/interpreter.py
@@ -6,12 +6,11 @@ import logging
 import textwrap
 
 from bytecode.numba.core import errors, ir, config
-from bytecode.numba.core.errors import NotDefinedError, UnsupportedError, error_extras
+from bytecode.numba.core.errors import NotDefinedError, UnsupportedError
 from bytecode.numba.core.ir_utils import get_definition, guard
 from bytecode.numba.core.utils import (PYVERSION, BINOPS_TO_OPERATORS,
                               INPLACE_BINOPS_TO_OPERATORS,)
 from bytecode.numba.core.byteflow import Flow, AdaptDFA, AdaptCFA, BlockKind
-from bytecode.numba.cpython.unsafe.tuple import unpack_single_tuple
 
 
 if PYVERSION in ((3, 12), ):
@@ -2494,15 +2493,7 @@ class Interpreter(object):
     def _build_tuple_unpack(self, inst, tuples, temps, is_assign):
         first = self.get(tuples[0])
         if is_assign:
-            # it's assign-like, defer handling to an intrinsic that will have
-            # type information.
-            # Can deal with tuples only, i.e. y = (*x,). where x = <tuple>
-            gv_name = "unpack_single_tuple"
-            gv_fn = ir.Global(gv_name, unpack_single_tuple, loc=self.loc,)
-            self.store(value=gv_fn, name=gv_name, redefine=True)
-            exc = ir.Expr.call(self.get(gv_name), args=(first,), kws=(),
-                               loc=self.loc,)
-            self.store(exc, temps[0])
+            raise NotImplementedError("Unsupported unpacking in assignment (j2kun did this!!)")
         else:
             loc = self.loc
             for other, tmp in zip(map(self.get, tuples[1:]), temps):
